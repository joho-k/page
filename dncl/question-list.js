const questions = {
    beginner: [
        { title: `変数の値を表示`, question: `変数 a に 10 を代入して表示をしてください。`, output: `aの値は 10 です`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `a *** 10\n表示する("aの値は",a, "です")`, hint: `a = 20 という命令は、変数 a に 20 という値を代入しています。` },
        { title: `変数の値を計算`, question: `変数 a の値と b の値を掛け合わせた値を表示してください。`, output: `cの値は 200 です`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `a = 10\nb = 20\nc = ******\n表示する("cの値は",c, "です")`, hint: `関数 表示する をみてみると、cの値を表示するようにしています。掛け算は 「*」という演算子を使えば計算できます。` },
        { title: `センチメートルをメートルに変換`, question: `変数 centimetre に、センチ単位の長さが入っています。それをメートルに変換して表示してください。`, output: `124 cmは、 1.24 mです。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `centimetre = 124\nmetre = ******\n表示する(centimetre, "cmは、", metre, "mです。" )`, hint: `a / b を用いると、aをbで割った数が計算できます。` },
        { title: `合格？不合格？`, question: `変数 score にテストの点数が入っている。このテストの点数が80点以上なら合格、それ以外なら不合格を表示してください。`, output: `79点なので不合格です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `score = 79\nもし ****** ならば:\n    表示する(score, "点なので合格です。")\nそうでなければ:\n    表示する(score, "点なので不合格です。")`, hint: `a > b → a は b より大きい\na >= b → a は b 以上\na < b → a は b より小さい\na <= b → a は b 以下\na == b → a と b は等しい\na != b → a と b は等しくない` },
        { title: `偶数？奇数？`, question: `変数 kazu1 に入っている値が偶数か奇数かを判定してください。`, output: `kazu1は偶数です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `kazu1 = 16\n\nもし ****** == 0 ならば:\n    表示する("kazu1は偶数です")\nそうでなければ:\n    表示する("kazu1は奇数です")`, hint: `偶数は、2で割ったあまりが0になると言い換えることができます。\n演算子 「%」を使うとあまりを出すことができます。例えば、「a % b」は「a を b で割ったあまり」が出てきます。` },
        { title: `「Hello, World!」を5回表示しよう`, question: `「Hello, World!」を5回表示してください。`, output: `Hello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `i を 0 から *** まで 1 ずつ増やしながら繰り返す:\n    表示する("Hello, World!")`, hint: `i の値は繰り返しを行うたびに 1→2→3→... と1ずつ増えていく。1回目の値は i=0、2回目の値は i=1、...となるので、5回目の時は i の値がどうなっているかを考えよう。` },
        { title: `1から順番に加算する`, question: `1 + 2 + 3 + 4 + 5 の計算結果を、繰り返し（ループ）を使って計算してください。`, output: `15`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `sum = 0\ni を 1 から 5 まで 1 ずつ増やしながら繰り返す:\n    sum = ******\n    \n表示する(sum)`, hint: `i は1から5までの値を順に取ります。繰り返しの中で sum に 現在の値 i を足すことで、合計を求めることができます。` },
        { title: `配列の要素を取得しよう`, question: `変数 Namae に入っている7つの都道府県の名前から「岩手県」を表示してください。`, output: `岩手県`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `Namae = ["北海道", "青森県", "岩手県", "秋田県", "宮城県", "山形県", "福島県"]\n表示する(Namae[***])`, hint: `配列は0から始まる添字を使って、特定の要素を取得します。つまり、Namae[0]は「北海道」を取得します。` },
        { title: `配列の要素を全て表示しよう`, question: `変数 Namae に入っている7つの都道府県の名前を1行ずつすべて表示してください。`, output: `北海道\n青森県\n岩手県\n秋田県\n宮城県\n山形県\n福島県`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `Namae = ["北海道", "青森県", "岩手県", "秋田県", "宮城県", "山形県", "福島県"]\ni を 0 から *** まで 1 ずつ増やしながら繰り返す:\n    表示する(Namae[***])`, hint: `最後の添字はいくつでしょう。添字は0から始まります。` },
        { title: `配列の中の合計を求めよう`, question: `変数 Kazu の中に入っている数値をすべて合計した値を表示してください。`, output: `38`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `Kazu = [2, 2, 9, 8, 4, 7, 6]\nsum = 0\ni を 0 から 6 まで 1 ずつ増やしながら繰り返す:\n    sum = ******\n    \n表示する(sum)`, hint: `合計される値は、変数 sum に入ります。繰り返しで、配列 Kazu の要素を取り出して合計に加えます。` },
        { title: `数字の2乗を計算する関数を作ろう`, question: `整数を1つ引数として受け取り、その2乗を計算して返す関数 二乗(数値) を作成してください。`, output: `36\n169`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n二乗(数値)...\n整数を1つ引数として受け取り、その2乗を計算して返す。`, code: `関数 二乗(num):\n    ****** を返す\n\n表示する(二乗(6))\n表示する(二乗(13))`, hint: `関数の中で、num を使ってその2乗を計算します。6の二乗は、何×何をしているでしょうか。` },
        { title: `文字列を繰り返して出力する関数`, question: `文字列と繰り返し回数を引数として受け取り、その文字列を指定された回数だけ繰り返した結果を返す関数 繰り返し文字(文字, 回数) を作成してください。`, output: `りんご\nりんご\nりんご\nりんご`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n繰り返し文字(文字, 回数) ...\n文字列と繰り返し回数を引数として受け取り、その文字列を指定された回数だけ繰り返した結果を返す。`, code: `関数 繰り返し文字(moji, kaisu):\n    i を 0 から ****** まで 1 ずつ増やしながら繰り返す:\n        表示する(***)\n    \nfood = "りんご"\nkai = 4\n繰り返し文字(***, ***)`, hint: `①繰り返し回数は引数 kaisu で指定されています。1回目のループ i=0、2回目のループ i=1、ということを考えてみてください。\n②表示したい文字列は引数 moji で指定されています。\n③関数を呼び出している側について、表示したい文字列は food 、繰り返したい回数は kai に代入されています。` },
        { title: `「Hello, World!」を5回表示しよう(2)`, question: `「Hello, World!」を5回表示してください。`, output: `Hello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `i = 0\ni <= ***  の間繰り返す:\n    表示する("Hello,World!")\n    i = i + 1`, hint: `i の値は繰り返しを行うたびに 1→2→3→... と1ずつ増えていく。1回目の値は i=0、2回目の値は i=1、...となるので、5回目の時は i の値がどうなっているかを考えよう。\nまた、i = i+1 は、iの値に1を足した値をiに入れ直す、という処理なので、繰り返し中の処理を実行するたびに1増えることになる。` },
        { title: `正方形の面積を表示しよう`, question: `1辺が1cm〜5cmの正方形の面積を表示してください。`, output: `1 cmの正方形の面積は、 1 cm²です\n2 cmの正方形の面積は、 4 cm²です\n3 cmの正方形の面積は、 9 cm²です\n4 cmの正方形の面積は、 16 cm²です\n5 cmの正方形の面積は、 25 cm²です`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n正方形(長さ)...\n整数を1つ引数として受け取り、1辺が引数で指定した長さの正方形の面積を計算する。`, code: `関数 正方形(nagasa):\n    nagasa * nagasa を返す\n\ni を 1 から 5 まで 1 ずつ増やしながら繰り返す:\n    menseki = 正方形(***)\n    表示する(i, "cmの正方形の面積は、", menseki, "cm²です")`, hint: `1辺が3cmの正方形の面積を計算するためには、正方形(3) と指定する。iの値は、1→2→... と値が変わるので、この関数とiを使うことで実行することができる。` },
        { title: `関数を使って足し算をしよう`, question: `「4+3の結果は7です。」と表示できるように、空欄を埋めましょう。ただし、関数「足し算」を使うこと。`, output: `4+3の結果は 7 です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n足し算(数値1, 数値2) … \n引数に 数値 を2つとる。その2つの数値を足した値を戻り値とする関数。`, code: `関数 足し算(a, b):\n    a + b を返す\n\nkekka = ******\n表示する("4+3の結果は" ,kekka, "です。")`, hint: `関数「足し算」は2つの引数を足す関数である。例えば、空欄に「足し算(1,2)」と入力すると、1+2 の値を戻り値とする。` },
    ],
    intermediate: [
        { title: `3つの数の平均`, question: `3つの数(kazu1, kazu2, kazu3)が与えられています。これらの数の平均を計算するプログラムを作成してください。`, output: `3つの数の平均は 7.666666666666667 です`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `kazu1 = 4\nkazu2 = 7\nkazu3 = 12\nheikin = *********\n表示する("3つの数の平均は",heikin,"です")`, hint: `4と7と12の平均の出し方を考えてみましょう。まずは4+7+12をしてから、3で割りますよね？` },
        { title: `秒数に変換`, question: `時間(変数 hour)、分(変数 minute)、秒(変数 second)が与えられています。これを秒数に変換してください。`, output: `2 時間 12 分 17 秒は、 7937 秒です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `hour = 2\nminute = 12\nsecond = 17\nbyou = ************\n表示する(hour , "時間" , minute , "分" , second , "秒は、",byou , "秒です。")`, hint: `1分は60秒、2分は120秒ですよね。では12分は何秒ですか？それはどのように出しましたか？` },
        { title: `2桁の数字かどうかを判定`, question: `関数「ふた桁判定」を完成させてください。もし2桁の数字であれば「2桁の数字です」を表示し、そうでなければ「2桁の数字ではありません」と表示するような関数です。`, output: `97 は、2桁の数字です\n1 は、2桁の数字ではありません\n123 は、2桁の数字ではありません`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\nふた桁判定(数値)...\n整数を1つ引数として受け取り、その数値が2桁の数値かどうかを返す。`, code: `関数 ふた桁判定(suuti):\n    もし ****** and ****** ならば:\n        表示する(suuti, "は、2桁の数字です")\n    そうでなければ:\n        表示する(suuti, "は、2桁の数字ではありません")\n\nふた桁判定(97)\nふた桁判定(1)\nふた桁判定(123)`, hint: `9は1桁の数値、10から2桁の数値です。なので、「10以上である」というのが最初の条件です。プログラムは、「10 ≦ suuti ≦ 99」という連続した書き方ができないので、2つに分けて書く必要があります。` },
        { title: `2つの変数を入れ替えよう`, question: `変数 aには10が、bには20 という値が入っています。この変数 a と b の値を入れ替えることです。（最終的に、a の値が 20、b の値が 10になる）ただし、a = 20 や b = 10 のように直接値を書き換えるのは禁止です。代わりに、別の変数 x を使って値を一時的に保存しながら、a と b の値を交換してください。`, output: `aの値は 20 、bの値は 10 になりました。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。`, code: `a = 10\nb = 20\n\nx = a\n***\n***\n\n表示する("aの値は", a, "、bの値は", b, "になりました。")`, hint: `箱Aにはりんご、箱Bにはみかんが入っています。箱Xは空です。このとき、箱Aと箱Bの中身を入れ替えて、箱Aにみかん、箱Bにはりんごが入っている状態にしてください。ただし、同時に果物をもてないものとします。` },
        { title: `配列の要素を全て表示しよう(2)`, question: `変数 Namae に入っている7つの都道府県の名前を1行ずつすべて表示してください。ただし、関数「要素数」を必ず使うこと。`, output: `北海道\n青森県\n岩手県\n秋田県\n宮城県\n山形県\n福島県`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n要素数(配列名)...\n引数に 配列 をとる。その配列の中にある要素数を戻り値とする関数。`, code: `Namae = ["北海道", "青森県", "岩手県", "秋田県", "宮城県", "山形県", "福島県"]\ni を 0 から ****** まで 1 ずつ増やしながら繰り返す:\n    表示する(Namae[***])`, hint: `要素数(Hairetsu) はこの場合7が戻り値です。では、最後の添字は6ですが、要素数(Hairetsu) が7なので、1引くと...?` },
        { title: `配列の最大の値は？`, question: `変数 Hairetsu には、いくつか数値が入っている。この中で一番最大の値を出力できるようにしてください。`, output: `変数Hairetsuの要素の中で最大値は 89 です。`, func: ``, code: `Hairetsu = [45, 69, 48, 9, 32, 89, 4]\nmax = -999\ni を 0 から 要素数(Hairetsu) - 1 まで 1 ずつ増やしながら繰り返す:\n    もし ****** ならば:\n        max = Hairetsu[i]\n    \n表示する("変数Hairetsuの要素の中で最大値は", max, "です。")`, hint: `max に配列の要素の中で最大値を順番に更新していく処理をします。\n比較するための条件は「現在の要素 Hairetsu[i] が、これまでに見つかった最大値 max より大きい場合」です。` },
    ],
    advanced: [
        { title: `○時間○分○秒の形に変換`, question: `秒数(変数byou)が与えられています。これを、○時間○分○秒の形に変換してください。`, output: `7937 秒は、 2 時間 12 分 17 秒です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n切り捨て(数値)...\n整数を1つ引数として受け取り、その値を切り捨てた値を返す。`, code: `byou = 7937\n\nhour = 切り捨て(******)\nminute = 切り捨て(******)\nsecond = ******\n\n表示する(byou , "秒は、",hour , "時間" , minute , "分" , second , "秒です。")`, hint: `1分は60秒、1時間は3600秒です。例えば3700秒は、まず3700÷3600をすると、1あまり100となります。1は時間の部分、あまった100は秒なので、この100秒について分と秒を計算してあげれば良いです。\n\na / b は、a÷bの商を計算します。\na % b は、 a÷bのあまりを計算します。` },
        { title: `じゃんけんゲームを完成させる`, question: `グーは0、チョキは1、パーは2で取り扱うじゃんけんゲームを完成させましょう。`, output: `あいこです\n勝ちました！\n負けました...`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\nふた桁判定(数値)...\n整数を1つ引数として受け取り、その数値が2桁の数値かどうかを返す。`, code: `関数 じゃんけん判定(jibun, aite):\n    もし ************ ならば:\n        表示する("あいこでした")\n    そうでなくもし ************ ならば:\n        表示する("勝ちました！")\n    そうでなくもし ************ ならば:\n        表示する("負けました...")\n\nじゃんけん判定(1,1)\nじゃんけん判定(0,1)\nじゃんけん判定(2,1)`, hint: `[ア] じゃんけんが「あいこ」の場合、 自分の手 (jibun) と 相手の手 (aite) が 同じ値 になります。\n[イ・ウ] 例えば勝つ時、jibun - aite の値は、グーとチョキとパーを出した時それぞれどんな値になるか考えてみましょう。` },
        { title: `サイコロを表示しよう`, question: `1〜6のランダムな数字が表示されるサイコロを作る。ただし、以下の関数を使うこと。`, output: `さいころの値は、 6 が出ました`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n乱数() … \n0以上1未満のランダムな数字を戻り値とする。\n\n切り捨て(数値) … \n引数に 数値 をとる。数値を切り捨てた値を戻り値とする関数。`, code: `関数 乱数():\n    実数乱数(0,1) を返す\n\nsaikoro = *********\n表示する("さいころの値は、", saikoro, "が出ました")`, hint: `① 空欄に、乱数() にしてみてください。どんな値が出ますか？\n② 乱数() * 6 にすると、最小値と最大値はどうなるでしょうか。\n③ ②の値を切り捨てると、最小値と最大値はどうなるでしょうか。また、最小値1、最大値6にするためにはどうすればよいでしょうか。` },
        { title: `数字をひっくり返そう`, question: `変数 suuti の数をひっくり返してください。（例えば、123だったら321にする）このとき、関数「切り捨て」を使うこと。`, output: `895 をひっくり返すと、 5 9 8 です。`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n切り捨て(数値) … \n引数に 数値 をとる。数値を切り捨てた値を戻り値とする関数。`, code: `suuti = 895\n\nhyaku = *********\njuu = *********\nichi = *********\n\n表示する(suuti, "をひっくり返すと、", ichi, juu, hyaku, "です。")`, hint: `最終的には、変数 hyaku には 8 が、変数 juu には 9 が、変数 ichi には 5 に入ればOKです。\n例えば895の8の部分を取るときは、100で割ったときの商の部分だけを使いたいので、suuti / 100 を切り捨てします。同様に10の位は、8を除いた95の部分から取り出す形になります。` },
        { title: `罫線を描こう`, question: `変数 size を使って、以下のような枠を表示するコードを作ってください。例えば、size = 4 ,6の場合、次のように出力されます。`, output: `┏┳┳┳┓\n┣╋╋╋┫\n┣╋╋╋┫\n┣╋╋╋┫\n┗┻┻┻┛\n┏┳┳┳┳┳┓\n┣╋╋╋╋╋┫\n┣╋╋╋╋╋┫\n┣╋╋╋╋╋┫\n┣╋╋╋╋╋┫\n┣╋╋╋╋╋┫\n┗┻┻┻┻┻┛`, func: `表示する(文字列)...\n()内に変数を入れると、変数の値を出力する。カンマ区切りで文字列や数値を連結して表示することができる。\n\n繰り返し(文字, 回数) … \n引数に 文字と回数 をとる。文字を回数分繰り返した文字列を戻り値とする。\n例: 繰り返し("B", 3) の戻り値は、 "BBB"`, code: `関数 繰り返し(text, kai):\n    kekka = ""\n    i を 0 から kai - 1 まで 1 ずつ増やしながら繰り返す:\n        kekka = kekka + text\n    kekka を返す\n\n関数 罫線(size):\n    topBorder = "┏" + 繰り返し("┳", ******) + "┓"\n    middleRow = "┣" + 繰り返し("╋", ******) + "┫"\n    bottomBorder = "┗" + 繰り返し("┻", ******) + "┛"\n    \n    表示する(topBorder)\n\n    i を 0 から ****** まで 1 ずつ増やしながら繰り返す:\n        表示する(middleRow)\n\n    表示する(bottomBorder)\n \n罫線(4)\n罫線(6)`, hint: `「┳」、「╋」、「┻」はそれぞれ何個ずつ表示する必要があるでしょうか。 size の値を使って、必要な数を考えてみましょう。\n同様に、真ん中の列は何行ずつ表示する必要があるでしょうか。これも size の値を使って、必要な数を考えてみましょう。` },
        { title: `支払う金額の最小硬貨・紙幣枚数を計算しよう`, question: `次の会話文を読んで、以下のプログラムの空欄を埋めなさい。\n\nAさん: 今日、お店で587円のお菓子を買ったんだけど、支払いの時に「500円玉と他の小さい硬貨だけで払ってください」って言われたんだ。\nBさん: それは面白いね！最小枚数の硬貨で支払うにはどうしたらいいんだろう？\nAさん: うーん、手作業で考えるのはちょっと面倒だよね。プログラムで計算できたら便利そうじゃない？\nBさん: たしかに！紙幣や硬貨の枚数を最小化するアルゴリズムを作れるか試してみようよ。`, output: `587円を、できるだけ少ない枚数の紙幣や硬貨で支払う\n10000円札: 0枚\n5000円札: 0枚\n1000円札: 0枚\n500円玉: 1枚\n100円玉: 0枚\n50円玉: 1枚\n10円玉: 3枚\n5円玉: 1枚\n1円玉: 2枚`, func: `要素数(配列名)...\n引数に 配列 をとる。その配列の中にある要素数を戻り値とする関数。\n\n切り捨て(数値) … \n引数に 数値 をとる。数値を切り捨てた値を戻り値とする関数。\n\n金額変換(amount)...\n引数に 金額 (整数) をとる。その金額を日本円の紙幣や硬貨（10000円札、5000円札、1000円札...1円玉）に分解し、各通貨の必要な枚数を配列として戻り値とする関数。\n例: calculate_change(4934) は [0,0,4,1,4,0,3,0,4] を返す。\n\n金額表示(change)...\n引数に 金額 (整数) をとる。その金額を 金額変換 関数で分解し、各通貨の枚数を「通貨名: 枚数」の形式で出力する関数。\n例: print_change(587) は、出力のような文字列を表示する`, code: `関数 金額変換(amount):\n    remaining_amount = amount\n    Kingaku = [10000, 5000, 1000, 500, 100, 50, 10, 5, 1]\n    Maisu = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    i を 0 から 要素数(Kingaku) - 1 まで 1 ずつ増やしながら繰り返す:\n        Maisu[i] = 切り捨て(******* / ******) \n        remaining_amount = ******* - ****** * ******\n    Maisu を返す\n\n関数 金額表示(change):\n    Maisu = 金額変換(change)\n    Money_names = ["10000円札", "5000円札", "1000円札", "500円玉", "100円玉", "50円玉", "10円玉", "5円玉", "1円玉"]\n    表示する(change , "円を、できるだけ少ない枚数の紙幣や硬貨で支払う")\n    i を 0 から 要素数(Maisu) - 1 まで 1 ずつ増やしながら繰り返す:\n        表示する(Money_names[i] , ": " , Maisu[i] , "枚")\n\n金額表示(587)\n　　　　　　　　　　`, hint: `関数 print_change(587) を実行すると、以下のように動作します。\n\n1. 587 を calculate_change 関数で分解します:\n\n10000円札(=Kingaku[0]): 0枚\n5000円札: 0枚\n1000円札: 0枚\n500円玉: 1枚(=Maisu[3])（残り(=remaining_amount) 87円）\n100円玉: 0枚\n50円玉: 1枚（残り37円）\n10円玉: 3枚（残り7円）\n5円玉: 1枚（残り2円）\n1円玉: 2枚\n結果として、Maisu = [0, 0, 0, 1, 0, 1, 3, 1, 2] が返されます。\n\n2. print_change 関数で分解結果を出力します:` },
        { title: `バブルソート`, question: `次の会話文を読んで、以下のプログラムの空欄を埋めなさい。\n\nAさん: 数字を並べ替えるプログラムを作ってみたんだけど、単純な方法ってどんなのがあるかな？\nBさん: 「バブルソート」って聞いたことある？すごく基本的なアルゴリズムだよ。\nAさん: 聞いたことないな。どういう仕組みなの？\nBさん: 簡単に言うと、隣り合う数字を比べて、大きい方を後ろに送っていく感じ。これを繰り返して、最後には数字が全部整列するんだよ。\nAさん: なるほど！それなら仕組みがわかりやすそうだね。実際にプログラムで書いてみたいな。\nBさん: じゃあ、配列をバブルソートで並べ替えるプログラムを作ってみよう！今回は昇順(小さい順)に並べてみよう。\n\nアルゴリズムの手順\n1.隣り合う要素を比較\n    配列の先頭から末尾まで順に、隣り合う2つの要素を比較します。\n    昇順にソートする場合、小さい値が左、大きい値が右に来るように交換します。\n2. 一回の繰り返しで最大値が決定\n    1回のループで配列の末尾には最大値が配置されます。この部分は以後ソート済みとして扱い、要素の比較はしません。\n3. 繰り返し処理\n    残りの要素について同様の処理を繰り返します。\n    要素数が1つになるまでループします。`, output: `[5,3,8,6,2]をソートした結果\n↓\n[2,3,5,6,8]`, func: `要素数(配列名)...\n引数に 配列 をとる。その配列の中にある要素数を戻り値とする関数。\n\nsort(Suuti)...\n引数に 並び替える前の数値が入った配列 (Suuti) をとる。その配列を昇順に並び替えた配列を戻り値とする関数。\n例: sort([5,3,8,6,2]) は [2,3,5,6,8] を返す。\n\nexchange(Hairetsu, soeji1, soeji2)...\n引数 Hairetsu には配列を、 soeji1とsoeji2 には添え字をとる。Hairetsuの soeji1 と soeji2 の添え字の要素を入れ替える。\n例: exchange([5,3,8,6,2], 2, 3) は [5,3,6,8,2] を返す。（添え字2と添え字3を入れ替える)`, code: `関数 exchange(Hairetsu,soeji1,soeji2):\n    tmp = Hairetsu[soeji1]\n    Hairetsu[soeji1] = Hairetsu[soeji2]\n    Hairetsu[soeji2] = tmp\n    Hairetsu を返す\n\n関数 sort(Suuti):\n    i を 0 から 要素数(Suuti) - 2 まで 1 ずつ増やしながら繰り返す:\n        j を i + 1 から 要素数(Suuti) - 1 まで 1 ずつ増やしながら繰り返す:\n            もし Suuti[i] *** Suuti[j] ならば:\n                Suuti = exchange(Suuti,***,***)\n    Suuti を返す\n\nSuuti = [5,3,8,6,2]\n表示する(Suuti , "をソートした結果" )\n表示する("↓")\n表示する(sort(Suuti))`, hint: `Suuti = [5, 3, 8, 6, 2]\n1回目のループ:\n    5(Suuti[0]) と 3(Suuti[1]) を比較\n        5は3よりも大きいので 5(Suuti[0]) と 3(Suuti[1]) を交換 → [3, 5, 8, 6, 2]\n    5(Suuti[1]) と 8(Suuti[2]) を比較\n        5は8よりも小さいので交換なし → [3, 5, 8, 6, 2]\n    8(Suuti[2]) と 6(Suuti[3]) を比較\n        8は6よりも大きいので 8(Suuti[2]) と 6(Suuti[3]) を交換 → [3, 5, 6, 8, 2]\n    8(Suuti[3]) と 2(Suuti[4]) を比較\n        8は2よりも大きいので 8(Suuti[3]) と 2(Suuti[4]) を交換 → [3, 5, 6, 2, 8]\n\n2回目のループ:\n    3(Suuti[0]) と 5(Suuti[1]) を比較\n        3は5よりも小さいので交換なし → [3, 5, 6, 2, 8]\n    5(Suuti[1]) と 6(Suuti[2]) を比較\n        5は6よりも小さいので交換なし → [3, 5, 6, 2, 8]\n    6(Suuti[2]) と 2(Suuti[3]) を比較\n        6は2よりも大きいので 6(Suuti[2]) と 2(Suuti[3]) を交換 → [3, 5, 2, 6, 8]\n\n3回目のループ:\n    3(Suuti[0]) と 5(Suuti[1]) を比較\n        3は5よりも小さいので交換なし → [3, 5, 2, 6, 8]\n    5(Suuti[1]) と 2(Suuti[2]) を比較\n        5は2よりも大きいので 5(Suuti[1]) と 2(Suuti[2]) を交換 → [3, 2, 5, 6, 8]\n\n4回目のループ:\n    3(Suuti[0]) と 2(Suuti[1]) を比較\n        3は2よりも大きいので 3(Suuti[0]) と 2(Suuti[1]) を交換 → [2, 3, 5, 6, 8]\n\n終了。出力: [2, 3, 5, 6, 8]\n\n(ア)...>, <, >=, <=, =, != のどれかが入ります。\n(イ)(ウ)... 配列の中のどの要素とどの要素を交換すれば良いかを考えてください。` },
        { title: `10進数から2進数の変換`, question: `次の会話文を読んで、以下のプログラムの空欄を埋めなさい。\n\nAさん: 10進数の23って、2進数だとどうなるんだっけ。\nBさん: 10111 だよ。2進数は右から1の位、2の位、4の位、8の位、16の位となっているよ。言い換えると、2の0乗の位、2の1乗の位、2の2乗の位、2の3乗の位、2の4乗の位となるよ。\nAさん: 難しいなあ。もう少しわかりやすい例はない？\nBさん: では、この世に1円玉、2円玉、4円玉、8円玉、16円玉...2のn乗円玉しかないことを考えるよ。このとき、23円はどのように払う？このとき大きい金額から考えて、より少ない枚数で払うことを考えてみてね。\nAさん: 16円玉が1枚、8円玉が0枚、4円玉が1枚、2円玉が1枚、1円玉が1枚かな？\nBさん: そう。枚数だけを並び替えるとどうなる？\nAさん: 10111。あ、これが23を2進数に変換した数か！なるほど。\nBさん: では、このアルゴリズムを表したプログラムを作成してみよう。`, output: `10進数の 23 を2進数に変換すると、 10111 です。`, func: `要素数(配列名)...\n引数に 配列 をとる。その配列の中にある要素数を戻り値とする関数。\n\nbekijo(kisu, shisu)...\n引数に kisu（基数）と shisu（指数）を取る。この関数は、kisu の shisu 乗の値を計算して戻り値として返す。具体的には、kisu を shisu 回掛け合わせた結果を返す。\n例: bekijo(2, 4) の場合は、16 を戻り値とする。\n\nhenkan_2shinsu(kazu)...\n引数に10進数の整数 kazu を取り、その整数を2進数に変換して返す関数。\n例: henkan_2shinsu(23) の場合は、"10111" を戻り値とする。`, code: `関数 bekijo(kazu,shisu):\n    もし shisu == 0 ならば:\n        1 を返す\n    result = 1\n    i を 1 から shisu まで 1 ずつ増やしながら繰り返す:\n        result = result * kazu\n    result を返す\n\n関数 henkan_2shinsu(kazu):\n    # 何の位から考えるかを判断\n    shisu = 0\n    remaining = kazu\n    bekijo(2,shisu) <= remaining の間繰り返す:\n        shisu = shisu + 1\n    \n    もし kazu == 0 ならば:\n        "0" を返す\n    \n    result = ""\n    i を shisu - 1 から 0 まで 1 ずつ減らしながら繰り返す:\n        もし ****** >= ****** ならば:\n            result = result + "1"\n            remaining = ****** - ******\n        そうでなければ:\n            result = result + "0"\n    result を返す\n\nkazu = 23\n表示する("10進数の " , kazu , "を2進数に変換すると、 " , henkan_2shinsu(kazu) , " です。" )`, hint: `空欄の部分は、2進数変換の過程で、remaining（残りの値）と現在の bekijo(2, i) の値を比較する箇所です。以下のステップで理解できます。\n\n・remaining 変数は、現在の変換対象となる10進数の値です。最初は kazu（10進数の値）からスタートし、処理が進むごとに減っていきます。\n・bekijo(2, i) は、2の i 乗（すなわち2のべき乗）を表します。この値が、残りの値（remaining）と比較されます。\n・比較の目的は、remaining が現在の2のべき乗以上であれば、その2進数の桁に「1」を加え、remaining からそのべき乗の値を引きます。\n・もし remaining が現在の2のべき乗より小さい場合、その桁には「0」を加えます。` },
        { title: `パリティビット`, question: `次の会話文を読んで、以下のプログラムの空欄を埋めなさい。\n\nAさん: コンピュータって、指示に対して絶対にミスなく処理できるんだよね\nBさん: 実際はミスがあっても、修正できる能力を持っているんだ。例えばインターネットでデータのやり取りをするときは、「パリティビット」と呼ばれる仕組みを利用してミスを検知しているんだ。\nAさん: それはどういった仕組みですか？\nBさん: コンピュータ内部では、データは0と1の羅列にしているというのは習ったよね。例えば「10111」というデータがあると思うんだけど、その中に1の個数は何個入っているかな？\nAさん: 4個ですね。\nBさん: そう、1の個数が4個だね。このデータが送られるとき、パリティビットを使って、1の個数が「奇数」か「偶数」かをチェックするんだ。今回は奇数パリティを使っていると仮定しよう。データを送る前に、「通信は奇数パリティを使いましょう」と受信側と送信側で決めておく。実際にデータを送る際は、元のデータ「10111」の末尾にパリティを追加して、全体のデータの1の個数が奇数個になるようにしておくんだ。\nAさん: ということは、元のデータの1の個数が偶数だから、パリティビットは「1」になるんですね。\nBさん: その通り！ インターネットでは時々、データ送信中にビットが反転してしまうことがあるんだ。例えば元のデータにパリティビットを追加した「101111」というデータが1つでも間違って、例えば「101011」に変わったら、1の個数は4個になって偶数になるよね。\nAさん: あ、そうなると、奇数パリティには合わなくなりますね。\nBさん: その通り！ その場合、受信側はパリティビットを確認して、エラーを検知することができるんだ。間違っていたことがわかるから、データを再送信するように指示することができるんだよ。\nAさん: なるほど、ビットが入れ替わった場合でも、パリティビットでエラーが検出できるんですね。\nBさん: そうなんだ。パリティビットは簡単な仕組みだけど、データ通信でエラーを早期に検出するのにとても役立つんだよ。`, output: `元データ→[1,0,1,0,1]\nパリティビットを付与した結果→[1,0,1,0,1,0]`, func: `要素数(配列名)...\n引数に 配列 をとる。その配列の中にある要素数を戻り値とする関数。\n\ncount1(data)...\n引数として渡された配列（data）の中に含まれる1の個数を数える関数。配列の各要素をチェックし、戻り値としてdataの中にある1の個数を戻り値とする。\n例: data = [1,0,1,1,1] のとき、count1(data) の戻り値は 4 となる。\n\n末尾に追加(Data, value)\n引数である Data (配列) の末尾に2つ目の引数 value を追加する。\n例: Data= [1,0,1,1,1], value=1 のとき、配列 Data の値が [1,0,1,1,1,1] となる。\n\naddParity(data)\n引数で渡された配列 data に奇数パリティビットを追加する関数。奇数パリティビットを付与した新しい配列を戻り値とする。`, code: `関数 末尾に追加(Data, value):\n    Data.append(value)\n\n関数 count1(data):\n    kosu = 0\n    # データの中にある1の個数を数える\n    i を 0 から 要素数(data) - 1 まで 1 ずつ増やしながら繰り返す:\n        もし data[i] == *** ならば:\n            kosu = kosu + 1\n    kosu を返す\n\n関数 addParity(data):\n    # 引数で指定した data に、奇数パリティビットを付与する\n    pari = 0\n    kosu = count1(data)\n    もし ****** == 0 ならば:\n        末尾に追加(data,1)\n    そうでなければ:\n        末尾に追加(data,0)\n    data を返す\n\n# 元データ\ndata = [1,0,1,0,1]\n表示する("元データ→" , data )\n# パリティビットを付与する\ndata = addParity(data)\n表示する("パリティビットを付与した結果→" , data )`, hint: `(ア)... この関数は、配列に入っている「1」の個数を数える関数です。繰り返しでは、配列1つ1つの要素を確認して、ある条件になれば個数に1を追加しています。このある条件が(ア)に入ります。\n\n(イ)... 奇数パリティとして1を付与する条件が(イ)です。1を付与するのは、個数がどのような状態の時でしたでしょうか。問題文を確認しましょう。最後に、その条件をプログラミングでどのように表せばよかったでしょうか。中級の第１問目を参考にしてください。` },
    ]
};